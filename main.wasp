app OpenSaaS {
  wasp: {
    version: "^0.16.0"
  },

  title: "JetSocket - Real-time WebSocket Applications Made Simple",

  head: [
    "<meta charset='utf-8' />",
    "<meta name='viewport' content='width=device-width, initial-scale=1.0' />",
    "<meta name='description' content='Looking for a Pusher alternative? JetSocket provides a powerful, scalable, and cost-effective solution for real-time WebSocket applications. Perfect replacement for Pusher with better features and pricing.' />",
    "<meta name='author' content='JetSocket' />",
    "<meta name='keywords' content='pusher alternative, pusher replacement, websocket, real-time, web applications, saas, development tools, api, socket.io, real-time communication, pusher vs jetsocket, ably, pubsub, real-time messaging, websocket alternative, real-time data, websocket api, real-time api' />",
    
    // Open Graph / Facebook
    "<meta property='og:type' content='website' />",
    "<meta property='og:title' content='JetSocket - The Best Pusher Alternative for Real-time WebSocket Applications' />",
    "<meta property='og:site_name' content='JetSocket' />",
    "<meta property='og:url' content='https://jetsocket.io' />",
    "<meta property='og:description' content='Looking for a Pusher alternative? JetSocket provides a powerful, scalable, and cost-effective solution for real-time WebSocket applications. Perfect replacement for Pusher with better features and pricing.' />",
    "<meta property='og:image' content='https://jetsocket.io/public-banner.webp' />",
    "<meta property='og:image:width' content='1200' />",
    "<meta property='og:image:height' content='630' />",
    "<meta property='og:locale' content='en_US' />",
    "<meta property='og:image:alt' content='JetSocket - Real-time WebSocket Applications' />",
    
    // Twitter
    "<meta name='twitter:card' content='summary_large_image' />",
    "<meta name='twitter:site' content='@jetsocket' />",
    "<meta name='twitter:creator' content='@jetsocket' />",
    "<meta name='twitter:title' content='JetSocket - The Best Pusher Alternative for Real-time WebSocket Applications' />",
    "<meta name='twitter:description' content='Looking for a Pusher alternative? JetSocket provides a powerful, scalable, and cost-effective solution for real-time WebSocket applications. Perfect replacement for Pusher with better features and pricing.' />",
    "<meta name='twitter:image' content='https://jetsocket.io/public-banner.webp' />",
    "<meta name='twitter:image:width' content='1200' />",
    "<meta name='twitter:image:height' content='630' />",
    "<meta name='twitter:image:alt' content='JetSocket - Real-time WebSocket Applications' />",
    
    // Additional SEO meta tags
    "<meta name='robots' content='index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1' />",
    "<meta name='language' content='English' />",
    "<meta name='revisit-after' content='7 days' />",
    "<meta name='generator' content='JetSocket' />",
    "<meta name='theme-color' content='#ffffff' />",
    "<meta name='mobile-web-app-capable' content='yes' />",
    "<meta name='apple-mobile-web-app-capable' content='yes' />",
    "<meta name='apple-mobile-web-app-status-bar-style' content='default' />",
    "<meta name='apple-mobile-web-app-title' content='JetSocket' />",
    
    // Additional SEO improvements
    "<meta name='format-detection' content='telephone=no' />",
    "<meta name='application-name' content='JetSocket' />",
    "<meta name='msapplication-TileColor' content='#ffffff' />",
    "<meta name='msapplication-TileImage' content='/mstile-144x144.png' />",
    "<meta name='msapplication-config' content='/browserconfig.xml' />",
    
    // Canonical URL
    "<link rel='canonical' href='https://jetsocket.io' />",
    
    // Favicon
    "<link rel='icon' type='image/png' sizes='32x32' href='/favicon-32x32.png' />",
    "<link rel='icon' type='image/png' sizes='16x16' href='/favicon-16x16.png' />",
    "<link rel='apple-touch-icon' sizes='180x180' href='/apple-touch-icon.png' />",
    "<link rel='manifest' href='/site.webmanifest' />",
    "<link rel='mask-icon' href='/safari-pinned-tab.svg' color='#5bbad5' />",
    
    // Plausible Analytics
    "<script defer data-domain='jetsocket.io' src='https://plausible.io/js/script.js'></script>",  // for production
    "<script defer data-domain='jetsocket.io' src='https://plausible.io/js/script.local.js'></script>",  // for development
  ],

  // üîê Auth out of the box! https://wasp.sh/docs/auth/overview
  auth: {
    userEntity: User,
    methods: {
      // NOTE: If you decide to not use email auth, make sure to also delete the related routes and pages below.
      //   (RequestPasswordReset(Route|Page), PasswordReset(Route|Page), EmailVerification(Route|Page))
      // email: {
      //   fromField: {
      //     name: "Open SaaS App",
      //     email: "me@example.com"
      //   },
      //   emailVerification: {
      //     clientRoute: EmailVerificationRoute,
      //     getEmailContentFn: import { getVerificationEmailContent } from "@src/auth/email-and-pass/emails",
      //   },
      //   passwordReset: {
      //     clientRoute: PasswordResetRoute,
      //     getEmailContentFn: import { getPasswordResetEmailContent } from "@src/auth/email-and-pass/emails",
      //   },
      //   userSignupFields: import { getEmailUserFields } from "@src/auth/userSignupFields",
      // },
      // Uncomment to enable Google Auth (check https://wasp.sh/docs/auth/social-auth/google for setup instructions):
      google: { // Guide for setting up Auth via Google
        userSignupFields: import { getGoogleUserFields } from "@src/auth/userSignupFields",
        configFn: import { getGoogleAuthConfig } from "@src/auth/userSignupFields",
      },
      // Uncomment to enable GitHub Auth (check https://wasp.sh/docs/auth/social-auth/github for setup instructions):
      gitHub: {
        userSignupFields: import { getGitHubUserFields } from "@src/auth/userSignupFields",
        configFn: import { getGitHubAuthConfig } from "@src/auth/userSignupFields",
      },
      // Uncomment to enable Discord Auth (check https://wasp.sh/docs/auth/social-auth/discord for setup instructions):
      // discord: {
      //   userSignupFields: import { getDiscordUserFields } from "@src/auth/userSignupFields",
      //   configFn: import { getDiscordAuthConfig } from "@src/auth/userSignupFields"
      // }
    },
    onAfterSignup: import { onAfterSignup } from "@src/auth/hooks",
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/dashboard",
  },

  db: {
    // Run `wasp db seed` to seed the database with the seed functions below:
    seeds: [
      // Populates the database with a bunch of fake users to work with during development.
      import { seedMockUsers } from "@src/server/scripts/dbSeeds",
    ]
  },

  client: {
    rootComponent: import App from "@src/client/App",
  },

  emailSender: {
    // NOTE: "Dummy" provider is just for local development purposes.
    //   Make sure to check the server logs for the email confirmation url (it will not be sent to an address)!
    //   Once you are ready for production, switch to e.g. "SendGrid" or "Mailgun" providers. Check out https://docs.opensaas.sh/guides/email-sending/ .
    provider: Mailgun,
    defaultFrom: {
      name: "Open SaaS App",
      // When using a real provider, e.g. SendGrid, you must use the same email address that you configured your account to send out emails with!
      email: "me@example.com"
    },
  },
}

route LandingPageRoute { path: "/", to: LandingPage }
page LandingPage {
  component: import LandingPage from "@src/landing-page/LandingPage"
}

//#region Auth Pages
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/auth/LoginPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { Signup } from "@src/auth/SignupPage"
}

// route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
// page RequestPasswordResetPage {
//   component: import { RequestPasswordResetPage } from "@src/auth/email-and-pass/RequestPasswordResetPage",
// }

// route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
// page PasswordResetPage {
//   component: import { PasswordResetPage } from "@src/auth/email-and-pass/PasswordResetPage",
// }

// route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
// page EmailVerificationPage {
//   component: import { EmailVerificationPage } from "@src/auth/email-and-pass/EmailVerificationPage",
// }
//#endregion

//#region User
route AccountRoute { path: "/account", to: AccountPage }
page AccountPage {
  authRequired: true,
  component: import Account from "@src/user/AccountPage"
}

query getPaginatedUsers {
  fn: import { getPaginatedUsers } from "@src/user/operations",
  entities: [User]
}

action updateCurrentUserLastActiveTimestamp {
  fn: import { updateCurrentUserLastActiveTimestamp } from "@src/user/operations",
  entities: [User]
}

action updateIsUserAdminById {
  fn: import { updateIsUserAdminById } from "@src/user/operations",
  entities: [User]
}
//#endregion

//#region Payment
route CheckoutRoute { path: "/checkout", to: CheckoutPage }
page CheckoutPage {
  authRequired: true,
  component: import Checkout from "@src/payment/CheckoutPage"
}

query getCustomerPortalUrl {
  fn: import { getCustomerPortalUrl } from  "@src/payment/operations",
  entities: [User]
}

action generateCheckoutSession {
  fn: import { generateCheckoutSession } from "@src/payment/operations",
  entities: [User]
}

api paymentsWebhook {
  fn: import { paymentsWebhook } from "@src/payment/webhook",
  entities: [User, WebsocketApp],
  middlewareConfigFn: import { paymentsMiddlewareConfigFn } from "@src/payment/webhook",
  httpRoute: (POST, "/payments-webhook")
}
//#endregion

//#region Analytics
query getDailyStats {
  fn: import { getDailyStats } from "@src/analytics/operations",
  entities: [User, DailyStats]
}

job dailyStatsJob {
  executor: PgBoss,
  perform: {
    fn: import { calculateDailyStats } from "@src/analytics/stats"
  },
  schedule: {
    cron: "0 * * * *" // every hour. useful in production
    // cron: "* * * * *" // every minute. useful for debugging
  },
  entities: [User, DailyStats, Logs, PageViewSource]
}
//#endregion

//#region Admin Dashboard
route AdminRoute { path: "/admin", to: AnalyticsDashboardPage }
page AnalyticsDashboardPage {
  authRequired: true,
  component: import AnalyticsDashboardPage from "@src/admin/dashboards/analytics/AnalyticsDashboardPage"
}

route AdminUsersRoute { path: "/admin/users", to: AdminUsersPage }
page AdminUsersPage {
  authRequired: true,
  component: import AdminUsers from "@src/admin/dashboards/users/UsersDashboardPage"
}

route AdminSettingsRoute { path: "/admin/settings", to: AdminSettingsPage }
page AdminSettingsPage {
  authRequired: true,
  component: import AdminSettings from "@src/admin/elements/settings/SettingsPage"
}

route AdminChartsRoute { path: "/admin/chart", to: AdminChartsPage }
page AdminChartsPage {
  authRequired: true,
  component: import AdminCharts from "@src/admin/elements/charts/ChartsPage"
}

route AdminFormElementsRoute { path: "/admin/forms/form-elements", to: AdminFormElementsPage }
page AdminFormElementsPage {
  authRequired: true,
  component: import AdminForms from "@src/admin/elements/forms/FormElementsPage"
}

route AdminFormLayoutsRoute { path: "/admin/forms/form-layouts", to: AdminFormLayoutsPage }
page AdminFormLayoutsPage {
  authRequired: true,
  component: import AdminForms from "@src/admin/elements/forms/FormLayoutsPage"
}

route AdminCalendarRoute { path: "/admin/calendar", to: AdminCalendarPage }
page AdminCalendarPage {
  authRequired: true,
  component: import AdminCalendar from "@src/admin/elements/calendar/CalendarPage"
}

route AdminUIAlertsRoute { path: "/admin/ui/alerts", to: AdminUIAlertsPage }
page AdminUIAlertsPage {
  authRequired: true,
  component: import AdminUI from "@src/admin/elements/ui-elements/AlertsPage"
}

route AdminUIButtonsRoute { path: "/admin/ui/buttons", to: AdminUIButtonsPage }
page AdminUIButtonsPage {
  authRequired: true,
  component: import AdminUI from "@src/admin/elements/ui-elements/ButtonsPage"
}

route NotFoundRoute { path: "*", to: NotFoundPage }
page NotFoundPage {
  component: import { NotFoundPage } from "@src/client/components/NotFoundPage"
}
//#endregion

//#region Contact Form Messages
// TODO: 
// add functionality to allow users to send messages to admin
// and make them accessible via the admin dashboard
route AdminMessagesRoute { path: "/admin/messages", to: AdminMessagesPage }
page AdminMessagesPage {
  authRequired: true,
  component: import AdminMessages from "@src/messages/MessagesPage"
}
//#endregion

//#region Newsletter
job sendNewsletter {
  executor: PgBoss,
  perform: {
    fn: import { checkAndQueueNewsletterEmails } from "@src/newsletter/sendNewsletter"
  },
  schedule: {
    cron: "0 7 * * 1" // at 7:00 am every Monday
  },
  entities: [User]
}
//#endregion

//#region Dashboard App

route DashboardRoute { path: "/dashboard", to: DashboardPage }
page DashboardPage {
  authRequired: true,
  component: import { DashboardPage } from "@src/websocket-app/dashboard/DashboardPage.jsx"
}


query getConnectedApps {
  fn: import { getConnectedApps } from "@src/websocket-app/dashboard/operations",
  entities: [WebsocketApp, AppMetrics]
}

//#endregion

query getApplication {
  fn: import { getApplication } from "@src/websocket-app/applications/operations.js",
  entities: [WebsocketApp, AppMetrics]
}

query getApplications {
  fn: import { getApplications } from "@src/websocket-app/applications/operations.js",
  entities: [WebsocketApp]
}

action updateApplication {
  fn: import { updateApplication } from "@src/websocket-app/applications/operations.js",
  entities: [WebsocketApp]
}

action createApplication {
  fn: import { createApplication } from "@src/websocket-app/applications/operations.js",
  entities: [WebsocketApp, User]
}

action deleteApplication {
  fn: import { deleteApplication } from "@src/websocket-app/applications/operations.js",
  entities: [WebsocketApp, AppMetrics]
}


