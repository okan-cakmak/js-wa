(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["JetSocket"] = factory();
	else
		root["JetSocket"] = factory();
})(this, function() {
return /******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/ws/browser.js":
/*!************************************!*\
  !*** ./node_modules/ws/browser.js ***!
  \************************************/
/***/ (function(module) {

"use strict";


module.exports = function () {
  throw new Error(
    'ws does not work in the browser. Browser clients must use the native ' +
      'WebSocket object'
  );
};


/***/ }),

/***/ "./src/JetSocket.js":
/*!**************************!*\
  !*** ./src/JetSocket.js ***!
  \**************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// Use native WebSocket in browser, fallback to ws in Node.js
const WebSocketImpl = typeof WebSocket !== 'undefined' ? WebSocket : __webpack_require__(/*! ws */ "./node_modules/ws/browser.js");

class JetSocket {
    constructor(options) {
        this.version = '1.0.0'; // Library version
        this.protocol = 7; // Pusher protocol version

        // Connection states
        this.STATES = {
            INITIALIZED: 'initialized',
            CONNECTING: 'connecting',
            CONNECTED: 'connected',
            DISCONNECTING: 'disconnecting',
            DISCONNECTED: 'disconnected',
            RECONNECTING: 'reconnecting',
            FAILED: 'failed'
        };

        this.options = {
            appKey: options.appKey,
            cluster: options.cluster || 'mt1',
            encrypted: options.encrypted !== false,
            wsHost: options.wsHost || `ws-${options.cluster}.jetsocket.io`, // WebSocket host
            wsPort: options.wsPort || (options.encrypted ? 443 : 80), // Allow custom port
            activityTimeout: 120, // Default activity timeout in seconds
            pongTimeout: 30, // Time to wait for pong response
            maxReconnectionAttempts: 6,
            maxReconnectGap: 30000, // Maximum reconnection gap in ms
            minReconnectGap: 1000,  // Minimum reconnection gap in ms
            rateLimiter: {
                maxEventsPerSecond: 10,
                maxEventsInBurst: 100
            },
            ...options
        };

        this.state = {
            connectionState: this.STATES.INITIALIZED,
            socket: null,
            channels: new Map(),
            socketId: null,
            activityTimeout: this.options.activityTimeout,
            lastActivity: null,
            activityTimer: null,
            pongTimer: null,
            reconnectTimer: null,
            reconnectionAttempts: 0,
            userDisconnected: false, // Track if disconnect was user initiated
            eventCount: 0,
            eventTimestamps: [],
            lastEventTime: null
        };

        this.events = {
            state_change: new Set(),
            connection: new Set(),
            error: new Set(),
            disconnection: new Set()
        };

        // Error codes and messages
        this.ERROR_CODES = {
            // Transport level errors (4000-4099)
            4000: 'Application only accepts SSL connections',
            4001: 'Application does not exist',
            4002: 'Application disabled',
            4003: 'Application rate limited',
            4004: 'Path not found',
            4005: 'Invalid version string format',
            4006: 'Invalid version',
            4007: 'Unsupported protocol version',
            4008: 'No protocol version supplied',
            4009: 'Connection is unauthorized',
            
            // Application level errors (4100-4199)
            4100: 'Over connection limit',
            4101: 'Over connection limit for application',
            4102: 'Path already in use',
            4103: 'Client event rejected - rate limit exceeded',
            4104: 'Client event rejected - invalid data format',
            4105: 'Client event rejected - event name too long',
            4106: 'Client event rejected - event data too large',
            4107: 'Client event rejected - event name format invalid',
            
            // Channel level errors (4200-4299)
            4200: 'Generic subscription error',
            4201: 'Not authorized to subscribe',
            4202: 'Subscription rejected - rate limit exceeded',
            4203: 'Subscription rejected - invalid channel name',
            4204: 'Subscription rejected - channel already subscribed',
            4205: 'Subscription rejected - channel capacity reached',
            4206: 'Subscription rejected - presence channel limit reached',
            4207: 'Subscription rejected - presence channel user limit reached'
        };

        this.connect();
    }

    // Update connection state and emit state change event
    updateState(newState, data = {}) {
        const previousState = this.state.connectionState;
        this.state.connectionState = newState;
        
        this.emit('state_change', {
            previous: previousState,
            current: newState,
            ...data
        });
    }

    connect() {
        // Don't reconnect if explicitly disconnected by user
        if (this.state.userDisconnected) {
            return;
        }

        this.updateState(this.STATES.CONNECTING);

        const protocol = this.options.encrypted ? 'wss://' : 'ws://';
        const queryParams = new URLSearchParams({
            protocol: this.protocol,
            client: 'js',
            version: this.version
        }).toString();

        // Format: {protocol}{host}/app/{key}?{query}
        const url = `${protocol}${this.options.wsHost}/app/${this.options.appKey}?${queryParams}`;

        try {
            this.state.socket = new WebSocketImpl(url);
            this.bindSocketEvents();
        } catch (error) {
            this.handleError({
                type: 'WebSocketError',
                error: error,
                data: { url }
            });
        }
    }

    handleError(error) {
        let errorData = {
            type: error.type || 'Error',
            code: error.code,
            message: error.message || 'Unknown error'
        };

        // Add human-readable message for known error codes
        if (error.code && this.ERROR_CODES[error.code]) {
            errorData.description = this.ERROR_CODES[error.code];
        }

        // Add additional context
        if (error.data) {
            errorData.data = error.data;
        }

        this.emit('error', errorData);
        
        // Handle fatal errors
        if (error.type === 'WebSocketError' || error.type === 'ConnectionError') {
            this.updateState(this.STATES.FAILED, { error: errorData });
            this.scheduleReconnection();
        }

        // Handle subscription errors
        if (error.type === 'SubscriptionError' && error.channel) {
            const channel = this.state.channels.get(error.channel);
            if (channel) {
                channel.handleSubscriptionError(error);
            }
        }
    }

    scheduleReconnection() {
        // Clear any existing reconnection timer
        if (this.state.reconnectTimer) {
            clearTimeout(this.state.reconnectTimer);
        }

        // Don't reconnect if max attempts reached or user disconnected
        if (this.state.userDisconnected || 
            this.state.reconnectionAttempts >= this.options.maxReconnectionAttempts) {
            this.updateState(this.STATES.FAILED);
            return;
        }

        // Calculate backoff delay with exponential backoff
        const delay = Math.min(
            this.options.maxReconnectGap,
            Math.max(
                this.options.minReconnectGap,
                Math.pow(2, this.state.reconnectionAttempts) * 1000
            )
        );

        this.updateState(this.STATES.RECONNECTING, {
            attempt: this.state.reconnectionAttempts + 1,
            delay
        });

        this.state.reconnectTimer = setTimeout(() => {
            this.state.reconnectionAttempts++;
            this.connect();
        }, delay);
    }

    bindSocketEvents() {
        this.state.socket.onopen = () => {
            // Reset reconnection attempts on successful connection
            this.state.reconnectionAttempts = 0;
            // Don't emit connection yet - wait for pusher:connection_established
        };

        this.state.socket.onclose = (closeEvent) => {
            this.cleanup();
            this.emit('disconnection', closeEvent);
            
            if (!this.state.userDisconnected) {
                this.scheduleReconnection();
            } else {
                this.updateState(this.STATES.DISCONNECTED);
            }
        };

        this.state.socket.onerror = (error) => {
            this.handleError(error);
        };

        this.state.socket.onmessage = (rawEvent) => {
            try {
                // Parse the main message
                const event = typeof rawEvent.data === 'string' ? 
                    JSON.parse(rawEvent.data) : 
                    rawEvent.data;

                this.handleEvent(event);
            } catch (error) {
                console.error("[WebSocket] Parse error:", error);
                this.emit('error', {
                    type: 'MessageParseError',
                    error: error,
                    data: rawEvent.data
                });
            }
        };
    }

    handleEvent(event) {
        console.log("[handleEvent] Processing event:", event.event);
        
        // Reset activity timer on any message received
        this.resetActivityTimer();
        
        switch (event.event) {
            case 'pusher:connection_established':
                try {
                    const data = typeof event.data === 'string' ? 
                        JSON.parse(event.data) : 
                        event.data;
                    
                    this.state.socketId = data.socket_id;
                    // Use server provided activity timeout if available
                    this.state.activityTimeout = data.activity_timeout || this.options.activityTimeout;
                    this.state.connected = true;
                    this.startActivityTimer();
                    this.emit('connection', { socketId: this.state.socketId });

                    // Use queueMicrotask to ensure any pending subscriptions are processed first
                    queueMicrotask(() => {
                        // Resubscribe to channels that were previously subscribed
                        this.state.channels.forEach((channel, channelName) => {
                            if (!channel.subscribed && !channel.subscribing) {
                                console.log("sending resubscription to channel", channelName);
                                try {
                                    channel.subscribing = true;  // Mark channel as being subscribed
                                    this.sendSubscription(channelName);
                                } catch (error) {
                                    channel.subscribing = false;  // Reset on error
                                    console.error(`[connection_established] Failed to subscribe to channel ${channelName}:`, error);
                                    this.emit('error', {
                                        type: 'SubscriptionError',
                                        error: error,
                                        channel: channelName
                                    });
                                }
                            }
                        });
                    });
                } catch (error) {
                    console.error("[connection_established] Parse error:", error);
                    this.emit('error', {
                        type: 'ConnectionError',
                        error: error,
                        data: event.data
                    });
                }
                break;

            case 'pusher:ping':
                this.send('pusher:pong', {});
                break;

            case 'pusher:error':
                // Handle both string and object data formats
                const errorData = typeof event.data === 'string' ? JSON.parse(event.data) : event.data;
                this.emit('error', errorData);
                break;

            case 'pusher_internal:subscription_succeeded':
                if (event.channel) {
                    console.log("[subscription_succeeded] Channel:", event.channel);
                    
                    const channel = this.state.channels.get(event.channel);
                    if (channel && !channel.subscribed) {
                        try {
                            let subscriptionData = {};
                            if (event.data && event.data !== '{}') {
                                subscriptionData = typeof event.data === 'string' ? 
                                    JSON.parse(event.data) : event.data;
                            }
                            channel.handleSubscriptionSucceeded(subscriptionData);
                        } catch (error) {
                            console.error("[subscription_succeeded] Parse error:", error);
                            this.emit('error', {
                                type: 'SubscriptionError',
                                error: error,
                                channel: event.channel
                            });
                        }
                    }
                }
                break;

            case 'pusher:pong':
                if (this.state.pongTimer) {
                    clearTimeout(this.state.pongTimer);
                    this.state.pongTimer = null;
                }
                break;

            default:
                // Handle channel events
                if (event.channel) {
                    const channel = this.state.channels.get(event.channel);
                    if (channel) {
                        // For non-pusher events, pass the data as-is without forcing JSON parse
                        // Only parse if it's a pusher event
                        const eventData = event.event.startsWith('pusher:') && typeof event.data === 'string' ? 
                            (event.data ? JSON.parse(event.data) : null) : 
                            event.data;
                        channel.handleEvent({
                            ...event,
                            data: eventData
                        });
                    }
                }
        }
    }

    sendSubscription(channelName) {
        console.log(Date.now(), " sending subscription to channel", channelName);
        const subscriptionData = {
            channel: channelName
        };

        // Add auth data only for private/presence channels
        if (channelName.startsWith('private-') || channelName.startsWith('presence-')) {
            if (!this.options.auth || !this.options.auth.endpoint) {
                throw new Error('Authentication endpoint required for private/presence channels');
            }

            const authData = {
                socket_id: this.state.socketId,
                channel_name: channelName
            };

            // Make HTTP request to auth endpoint
            return fetch(this.options.auth.endpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    ...(this.options.auth.headers || {})
                },
                body: JSON.stringify(authData)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Auth endpoint returned ${response.status}`);
                }
                return response.json();
            })
            .then(authResponse => {
                if (!authResponse.auth) {
                    throw new Error('Auth endpoint did not return auth signature');
                }
                
                // Add the auth signature to subscription data
                subscriptionData.auth = authResponse.auth;
                
                // Add any channel data for presence channels
                if (authResponse.channel_data) {
                    subscriptionData.channel_data = authResponse.channel_data;
                }
                
                this.send('pusher:subscribe', subscriptionData);
            })
            .catch(error => {
                const channel = this.state.channels.get(channelName);
                if (channel) {
                    channel.subscribing = false;
                }
                this.emit('error', {
                    type: 'AuthError',
                    error: error,
                    channel: channelName
                });
            });
        }

        // For public channels, send subscription immediately
        this.send('pusher:subscribe', subscriptionData);
    }

    subscribe(channelName) {
        console.log(Date.now(), " subscribing to channel", channelName);
        const existingChannel = this.state.channels.get(channelName);
        
        // Return existing channel if already subscribed or in process of subscribing
        if (existingChannel && (existingChannel.subscribed || existingChannel.subscribing)) {
            return existingChannel;
        }

        // Create new channel if it doesn't exist
        if (!existingChannel) {
            const channel = new Channel(channelName, this);
            this.state.channels.set(channelName, channel);
        }

        // Send subscription if connected
        if (this.state.connected) {
            const channel = this.state.channels.get(channelName);
            channel.subscribing = true;
            this.sendSubscription(channelName);
        }
        
        return this.state.channels.get(channelName);
    }

    unsubscribe(channelName) {
        const channel = this.state.channels.get(channelName);
        if (channel) {
            this.send('pusher:unsubscribe', {
                channel: channelName
            });
            channel.subscribed = false;
            this.state.channels.delete(channelName);
        }
    }

    send(event, data, channel = null) {
        // Validate event name length
        if (event.length > 200) {
            throw new Error('Event name too long');
        }

        // Validate data size (max 10KB)
        const dataSize = JSON.stringify(data).length;
        if (dataSize > 10240) {
            throw new Error('Event data too large');
        }

        // Apply rate limiting for client events
        if (event.startsWith('client-')) {
            try {
                this.checkRateLimit();
            } catch (error) {
                this.handleError({
                    type: 'RateLimitError',
                    code: 4103,
                    message: error.message
                });
                return;
            }
        }

        const message = {
            event: event,
            data: event.startsWith('pusher:') ? data : JSON.stringify(data)
        };
        
        if (channel) {
            message.channel = channel;
        }

        if (this.state.socket && this.state.socket.readyState === WebSocketImpl.OPEN) {
            try {
                this.state.socket.send(JSON.stringify(message));
            } catch (error) {
                this.handleError({
                    type: 'SendError',
                    message: 'Failed to send message',
                    data: { event, channel }
                });
            }
        }
    }

    startActivityTimer() {
        this.resetActivityTimer();
        
        // Start monitoring for activity
        this.state.activityTimer = setInterval(() => {
            const now = Date.now();
            if (!this.state.lastActivity || (now - this.state.lastActivity) >= (this.state.activityTimeout * 1000)) {
                this.ping();
            }
        }, 1000); // Check every second
    }

    resetActivityTimer() {
        this.state.lastActivity = Date.now();
    }

    ping() {
        if (!this.state.connected) return;

        this.send('pusher:ping', {});
        
        // Start pong timeout
        if (this.state.pongTimer) {
            clearTimeout(this.state.pongTimer);
        }
        
        this.state.pongTimer = setTimeout(() => {
            console.log('No pong received within timeout, closing connection');
            this.disconnect();
        }, this.options.pongTimeout * 1000);
    }

    cleanup() {
        if (this.state.activityTimer) {
            clearInterval(this.state.activityTimer);
            this.state.activityTimer = null;
        }
        if (this.state.pongTimer) {
            clearTimeout(this.state.pongTimer);
            this.state.pongTimer = null;
        }
        if (this.state.reconnectTimer) {
            clearTimeout(this.state.reconnectTimer);
            this.state.reconnectTimer = null;
        }
        
        // Mark all channels as unsubscribed on cleanup
        this.state.channels.forEach(channel => {
            channel.subscribed = false;
        });
        
        this.state.socketId = null;
        this.state.lastActivity = null;
    }

    disconnect() {
        this.state.userDisconnected = true;
        this.updateState(this.STATES.DISCONNECTING);
        
        if (this.state.reconnectTimer) {
            clearTimeout(this.state.reconnectTimer);
            this.state.reconnectTimer = null;
        }

        if (this.state.socket) {
            this.state.socket.close();
        }
        this.cleanup();
        this.updateState(this.STATES.DISCONNECTED);
    }

    on(event, callback) {
        if (this.events[event]) {
            this.events[event].add(callback);
        }
    }

    off(event, callback) {
        if (this.events[event]) {
            this.events[event].delete(callback);
        }
    }

    emit(event, data) {
        if (this.events[event]) {
            this.events[event].forEach(callback => callback(data));
        }
    }

    // Rate limiting implementation
    checkRateLimit() {
        const now = Date.now();
        const oneSecondAgo = now - 1000;
        
        // Remove events older than 1 second
        this.state.eventTimestamps = this.state.eventTimestamps.filter(
            timestamp => timestamp > oneSecondAgo
        );

        // Check rate limits
        if (this.state.eventTimestamps.length >= this.options.rateLimiter.maxEventsInBurst) {
            throw new Error('Rate limit exceeded: Too many events in burst');
        }

        const eventsInLastSecond = this.state.eventTimestamps.length;
        if (eventsInLastSecond >= this.options.rateLimiter.maxEventsPerSecond) {
            throw new Error('Rate limit exceeded: Too many events per second');
        }

        // Record this event
        this.state.eventTimestamps.push(now);
        this.state.lastEventTime = now;
    }
}

class Channel {
    constructor(name, client) {
        this.name = name;
        this.client = client;
        this.events = new Map();
        this.subscribed = false;
        this.subscribing = false;
        
        // Presence channel specific properties
        this.members = new Map();
        this.myID = null;
        this.me = null;
        this.subscriptionPending = true;
        
        // Determine channel type
        this.type = this.getChannelType();
    }

    getChannelType() {
        if (this.name.startsWith('private-')) {
            return 'private';
        } else if (this.name.startsWith('presence-')) {
            return 'presence';
        }
        return 'public';
    }

    bind(eventName, callback) {
        if (!this.events.has(eventName)) {
            this.events.set(eventName, new Set());
        }
        this.events.get(eventName).add(callback);
    }

    unbind(eventName, callback) {
        if (this.events.has(eventName)) {
            if (callback) {
                this.events.get(eventName).delete(callback);
            } else {
                this.events.delete(eventName);
            }
        }
    }

    handleEvent(event) {
        console.log("[Channel handleEvent] Event:", event);
        
        // Handle presence channel specific events
        if (this.type === 'presence') {
            switch (event.event) {
                case 'pusher_internal:member_added':
                    if (event.data) {
                        const memberData = typeof event.data === 'string' ? 
                            JSON.parse(event.data) : event.data;
                        this.members.set(memberData.user_id, memberData.user_info);
                        this.emit('pusher:member_added', {
                            id: memberData.user_id,
                            info: memberData.user_info
                        });
                    }
                    return;

                case 'pusher_internal:member_removed':
                    if (event.data) {
                        const memberData = typeof event.data === 'string' ? 
                            JSON.parse(event.data) : event.data;
                        const member = this.members.get(memberData.user_id);
                        this.members.delete(memberData.user_id);
                        if (member) {
                            this.emit('pusher:member_removed', {
                                id: memberData.user_id,
                                info: member
                            });
                        }
                    }
                    return;
            }
        }

        // Handle regular events
        if (this.events.has(event.event)) {
            const callbacks = this.events.get(event.event);
            try {
                const data = event.event.startsWith('pusher:') && typeof event.data === 'string' ? 
                    JSON.parse(event.data) : 
                    event.data;
                callbacks.forEach(callback => callback(data));
            } catch (error) {
                console.error("[Channel handleEvent] Parse error:", error);
                throw error;
            }
        }
    }

    handleSubscriptionSucceeded(data) {
        this.subscribed = true;
        this.subscribing = false;
        this.subscriptionPending = false;

        // Handle presence channel subscription data
        if (this.type === 'presence' && data) {
            // Initialize presence state
            this.myID = data.myID;
            this.me = data.me;
            
            // Set initial members
            if (data.presence && data.presence.members) {
                Object.entries(data.presence.members).forEach(([id, info]) => {
                    this.members.set(id, info);
                });
            }
        }

        // Emit subscription succeeded event
        if (this.events.has('pusher:subscription_succeeded')) {
            const callbacks = this.events.get('pusher:subscription_succeeded');
            callbacks.forEach(callback => callback(data));
        }
    }

    handleSubscriptionError(error) {
        this.subscribed = false;
        this.subscribing = false;
        this.subscriptionPending = false;
        
        if (this.events.has('pusher:subscription_error')) {
            this.emit('pusher:subscription_error', error);
        }
    }

    // Presence channel specific methods
    members() {
        if (this.type !== 'presence') {
            throw new Error('Members can only be accessed on presence channels');
        }
        return Array.from(this.members.entries()).map(([id, info]) => ({
            id,
            info
        }));
    }

    myMember() {
        if (this.type !== 'presence') {
            throw new Error('Member info can only be accessed on presence channels');
        }
        return this.me ? { id: this.myID, info: this.me } : null;
    }

    emit(eventName, data) {
        if (this.events.has(eventName)) {
            const callbacks = this.events.get(eventName);
            callbacks.forEach(callback => callback(data));
        }
    }

    trigger(eventName, data) {
        if (!this.name.startsWith('private-') && !this.name.startsWith('presence-')) {
            throw new Error('Client events can only be triggered on private or presence channels');
        }

        if (!eventName.startsWith('client-')) {
            throw new Error('Client events must be prefixed with client-');
        }

        // Validate event name format
        if (!/^client-[a-zA-Z0-9-_]+$/.test(eventName)) {
            throw new Error('Invalid event name format');
        }

        this.client.send(eventName, data, this.name);
    }
}

// Export for both browser and Node.js environments
if ( true && module.exports) {
    module.exports = JetSocket;
} else if (typeof window !== 'undefined') {
    window.JetSocket = JetSocket;
} 

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/JetSocket.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,