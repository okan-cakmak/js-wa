name: Deploy Backend to AWS EC2 and Frontend to Netlify

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  BACKEND_ECR_REPOSITORY: wasp-app-backend
  FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
  BACKEND_URL: ${{ secrets.BACKEND_URL }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20
        cache: 'npm'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Wasp app
      run: |
        curl -sSL https://get.wasp-lang.dev/installer.sh | sh
        wasp build

    # Build and push backend image
    - name: Docker meta for backend
      id: meta-backend
      uses: docker/metadata-action@v4
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.BACKEND_ECR_REPOSITORY }}

    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: .wasp/build
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.BACKEND_ECR_REPOSITORY }}:${{ github.sha }}
        labels: ${{ steps.meta-backend.outputs.labels }}

    - name: Deploy Backend to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: root
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          
          # Create docker network if it doesn't exist
          docker network create wasp-network || true
          
          # Pull the new backend image
          docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.BACKEND_ECR_REPOSITORY }}:${{ github.sha }}
          
          # Stop and remove the old backend container if it exists
          docker stop wasp-app-backend || true
          docker rm wasp-app-backend || true
          
          echo "Debug: FRONTEND_URL = ${FRONTEND_URL}"
          echo "Debug: BACKEND_URL = ${BACKEND_URL}"
          
          # Run the backend container
          docker run -d \
            --name wasp-app-backend \
            --network wasp-network \
            -p 3001:3001 \
            -e PORT=3001 \
            -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -e WASP_WEB_CLIENT_URL=${{ secrets.FRONTEND_URL }} \
            -e WASP_SERVER_URL=${{ secrets.BACKEND_URL }} \
            -e MAILGUN_API_KEY=${{ secrets.MAILGUN_API_KEY }} \
            -e MAILGUN_DOMAIN=${{ secrets.MAILGUN_DOMAIN }} \
            -e STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }} \
            -e LEMONSQUEEZY_API_KEY=${{ secrets.LEMONSQUEEZY_API_KEY }} \
            -e GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
            -e GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
            -e GITHUB_CLIENT_ID=${{ secrets.GH_CLIENT_ID }} \
            -e GITHUB_CLIENT_SECRET=${{ secrets.GH_CLIENT_SECRET }} \
            -e LEMONSQUEEZY_STORE_ID=${{ secrets.LEMONSQUEEZY_STORE_ID }} \
            -e LEMONSQUEEZY_WEBHOOK_SECRET=${{ secrets.LEMONSQUEEZY_WEBHOOK_SECRET }} \
            -e PAYMENTS_HOBBY_SUBSCRIPTION_PLAN_ID=${{ secrets.PAYMENTS_HOBBY_SUBSCRIPTION_PLAN_ID }} \
            -e PAYMENTS_STARTUP_SUBSCRIPTION_PLAN_ID=${{ secrets.PAYMENTS_STARTUP_SUBSCRIPTION_PLAN_ID }} \
            -e PAYMENTS_SCALE_SUBSCRIPTION_PLAN_ID=${{ secrets.PAYMENTS_SCALE_SUBSCRIPTION_PLAN_ID }} \
            ${{ steps.login-ecr.outputs.registry }}/${{ env.BACKEND_ECR_REPOSITORY }}:${{ github.sha }}
          
          # Clean up old images
          docker image prune -f

    # Deploy frontend to Netlify
    - name: Install Netlify CLI
      run: npm install -g netlify-cli@16

    - name: Build Frontend for Production
      run: |
        cd .wasp/build/web-app
        npm install
        REACT_APP_API_URL=${BACKEND_URL} npm run build
        netlify deploy --dir=build --prod --auth=${{ secrets.NETLIFY_AUTH_TOKEN }} --site=${{ secrets.NETLIFY_SITE_ID }}