name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }} # Change this to your AWS region
  BACKEND_ECR_REPOSITORY: wasp-app-backend # Change this to your backend ECR repository name
  FRONTEND_ECR_REPOSITORY: wasp-app-frontend # Change this to your frontend ECR repository name
  EC2_HOST: ${{ secrets.EC2_HOST }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20
        cache: 'npm'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Wasp app
      run: |
        curl -sSL https://get.wasp-lang.dev/installer.sh | sh
        wasp build

    # Build and push backend image
    - name: Docker meta for backend
      id: meta-backend
      uses: docker/metadata-action@v4
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.BACKEND_ECR_REPOSITORY }}

    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: .wasp/build
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.BACKEND_ECR_REPOSITORY }}:${{ github.sha }}
        labels: ${{ steps.meta-backend.outputs.labels }}

    # Create frontend Dockerfile and config first
    - name: Create frontend Dockerfile
      run: |
        cat << EOF > .wasp/build/web-app/Dockerfile
        FROM node:18.18.0-alpine3.17 as builder
        WORKDIR /app
        COPY . .
        ENV NODE_ENV=production
        RUN npm install
        RUN npm run build

        FROM nginx:alpine
        COPY --from=builder /app/build /usr/share/nginx/html
        COPY nginx.conf /etc/nginx/conf.d/default.conf
        EXPOSE 80
        CMD ["nginx", "-g", "daemon off;"]
        EOF

    - name: Create nginx config
      run: |
        cat << EOF > .wasp/build/web-app/nginx.conf
        server {
            listen 80;
            root /usr/share/nginx/html;
            index index.html;
            
            location / {
                try_files \$uri \$uri/ /index.html;
            }
            
            location /api {
                proxy_pass http://wasp-app-backend:3001;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host \$host;
                proxy_cache_bypass \$http_upgrade;
            }
        }
        EOF

    # Build and push frontend image
    - name: Docker meta for frontend
      id: meta-frontend
      uses: docker/metadata-action@v4
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.FRONTEND_ECR_REPOSITORY }}

    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: .wasp/build/web-app
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.FRONTEND_ECR_REPOSITORY }}:${{ github.sha }}
        labels: ${{ steps.meta-frontend.outputs.labels }}

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          
          # Create docker network if it doesn't exist
          docker network create wasp-network || true
          
          # Pull the new images
          docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.BACKEND_ECR_REPOSITORY }}:${{ github.sha }}
          docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.FRONTEND_ECR_REPOSITORY }}:${{ github.sha }}
          
          # Stop and remove the old containers if they exist
          docker stop wasp-app-backend wasp-app-frontend || true
          docker rm wasp-app-backend wasp-app-frontend || true
          
          # Run the backend container
          docker run -d \
            --name wasp-app-backend \
            --network wasp-network \
            -p 3001:3001 \
            -e PORT=3001 \
            -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -e WASP_WEB_CLIENT_URL=http://${{ secrets.EC2_HOST }} \
            ${{ steps.login-ecr.outputs.registry }}/${{ env.BACKEND_ECR_REPOSITORY }}:${{ github.sha }}
          
          # Run the frontend container
          docker run -d \
            --name wasp-app-frontend \
            --network wasp-network \
            -p 80:80 \
            ${{ steps.login-ecr.outputs.registry }}/${{ env.FRONTEND_ECR_REPOSITORY }}:${{ github.sha }}
          
          # Clean up old images
          docker image prune -f 